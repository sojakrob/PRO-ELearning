@model ELearning.Models.Data.NewFormModel
@using ELearning.Utils


<div class="editor-group" id="FormNameGroup">
    <div class="editor-label">
        @Html.LabelFor(model => model.Name)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.Name)
        @Html.ValidationMessageFor(model => model.Name)
    </div>
</div>

<div class="editor-group" id="FormTypeGroup">
    <div class="editor-label">
        FormType
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(
            model => model.Type.ID, 
            new SelectList(((ICollection<ELearning.Models.Data.FormTypeModel>)ViewBag.FormTypes), "ID", "Name", Model == null || Model.Type == null ? ViewBag.DefaultFormType : Model.Type.ID)
            )
        @Html.ValidationMessageFor(model => model.Type)
    </div>
    <div class="clear"></div>
</div>

<div class="clear"></div>

<div class="editor-group" id="TextGroup">
    <div class="editor-label">
        @Html.LabelFor(model => model.Text)
    </div>
    <div class="editor-field">
        @Html.TextAreaFor(model => model.Text)
        @Html.ValidationMessageFor(model => model.Text)
    </div>
    <div class="clear"></div>
</div>

<div class="editor-group" id="TimeToFillGroup">
    <div class="editor-label">
        @Html.LabelFor(model => model.TimeToFill)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.TimeToFill)
        minutes
        @Html.ValidationMessageFor(model => model.TimeToFill)
    </div>
    <div class="clear"></div>
</div>

<div class="editor-group" id="ShuffleGroup">
    <div class="editor-label">
        @Html.LabelFor(model => model.Shuffle)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.Shuffle)
        @Html.ValidationMessageFor(model => model.Shuffle)
    </div>
    <div class="clear"></div>
</div>

<div class="clear"></div>

<fieldset>
    <legend>Groups</legend>
    <h3>Groups</h3>
    <div>
        @{
            IDictionary<string, object> htmlValues = new Dictionary<string, object>();
            htmlValues.Add("checked", "checked");
        }
        @foreach (var group in Model.AssignedGroups)
        {
            @Html.CheckBox(string.Format("assignedGroupsGID{0}", group.ID), "assignedGroupIDs", group.ID.ToString(), htmlValues);
            <label for="@string.Format("assignedGroupsGID{0}", group.ID)" title="@group.Name">@group.Name</label>
        }
    </div>
    <div>
        @foreach (var group in Model.PossibleGroups)
        {
            @Html.CheckBox(string.Format("assignedGroupsGID{0}", group.ID), "assignedGroupIDs", group.ID.ToString(), null);
            <label for="@string.Format("assignedGroupsGID{0}", group.ID)" title="@group.Name">@group.Name</label>                                                     
        }
    </div>
    <div class="clear"></div>
</fieldset>

<div class="clear"></div>


